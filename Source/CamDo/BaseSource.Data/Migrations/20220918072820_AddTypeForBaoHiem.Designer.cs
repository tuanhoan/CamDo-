// <auto-generated />
using System;
using BaseSource.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BaseSource.Data.Migrations
{
    [DbContext(typeof(BaseSourceDbContext))]
    [Migration("20220918072820_AddTypeForBaoHiem")]
    partial class AddTypeForBaoHiem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BaseSource.Data.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c1105ce5-9dbc-49a9-a7d5-c963b6daa62a",
                            ConcurrencyStamp = "da6d0964-10b3-4ee6-bcd0-048d0fffd932",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "3a1cf1ce-83be-44ed-a5fe-6b2f25ffae32",
                            ConcurrencyStamp = "be009a6d-c92c-47d5-b0c0-dffb1ac84b7e",
                            Description = "Shop Manager role",
                            Name = "ShopManager",
                            NormalizedName = "ShopManager"
                        },
                        new
                        {
                            Id = "ffded6b0-37d9-4676-241b-69459029a622",
                            ConcurrencyStamp = "d54e1b30-6047-4b7c-9def-20e12016ff42",
                            Description = "Staff",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        });
                });

            modelBuilder.Entity("BaseSource.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ffded6b0-3769-4976-841b-69459049a62d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aed84e8f-4f85-4c53-ac12-2dd031faeb5a",
                            Email = "doangiau2006@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "doangiau2006@gmail.com",
                            NormalizedUserName = "superadmin",
                            PasswordHash = "AQAAAAEAACcQAAAAEG0cygEAmbLjenwJEPVmsQZ+pEBQDiGQqZkBZTBbviYCTynfYS0I1qj6arJHH2VE5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        });
                });

            modelBuilder.Entity("BaseSource.Data.Entities.AuthorFunction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FuncCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FuncName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("SubFunc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthorFunctions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(1860),
                            FuncCode = "TrangChu",
                            FuncName = "Trang Chủ",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(8977),
                            FuncCode = "DichVu",
                            FuncName = "Dịch vụ",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(8990),
                            FuncCode = "DichVu_MuaBaoHiem",
                            FuncName = "Mua bảo hiểm",
                            Level = 2,
                            SubFunc = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(8993),
                            FuncCode = "DichVu_MuaBaoHiem_ThemMoi",
                            FuncName = "Thêm mới",
                            Level = 3,
                            SubFunc = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(8994),
                            FuncCode = "DichVu_MuaBaoHiem_NapTien",
                            FuncName = "Thêm mới",
                            Level = 3,
                            SubFunc = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(8995),
                            FuncCode = "DichVu_ThanhToan",
                            FuncName = "Thanh toán",
                            Level = 1,
                            SubFunc = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(8997),
                            FuncCode = "QuanLyCuaHang",
                            FuncName = "Quản lý cửa hàng",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(8998),
                            FuncCode = "QuanLyCuaHang_TongQuatChuoiCuaHang",
                            FuncName = "Tổng quát chuỗi cửa hàng",
                            Level = 2,
                            SubFunc = 7
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(8999),
                            FuncCode = "QuanLyCuaHang_ThongTinChiTietCuaHang",
                            FuncName = "Thông tin chi tiết cửa hàng",
                            Level = 2,
                            SubFunc = 7
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9001),
                            FuncCode = "QuanLyCuaHang_DanhSachCuaHang",
                            FuncName = "Danh sách cửa hàng",
                            Level = 2,
                            SubFunc = 7
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9002),
                            FuncCode = "QuanLyCuaHang_DanhSachCuaHang_ThemMoi",
                            FuncName = "Thêm mới",
                            Level = 3,
                            SubFunc = 10
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9003),
                            FuncCode = "QuanLyCuaHang_DanhSachCuaHang_CapNhat",
                            FuncName = "Cập nhật",
                            Level = 3,
                            SubFunc = 10
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9005),
                            FuncCode = "QuanLyCuaHang_DanhSachCuaHang_Xoa",
                            FuncName = "Xóa",
                            Level = 3,
                            SubFunc = 10
                        },
                        new
                        {
                            Id = 14,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9006),
                            FuncCode = "QuanLyCuaHang_DanhSachCuaHang_ChuyenShop",
                            FuncName = "Chuyển shop",
                            Level = 3,
                            SubFunc = 10
                        },
                        new
                        {
                            Id = 15,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9007),
                            FuncCode = "QuanLyCuaHang_CauHinhHangHoa",
                            FuncName = "Cấu hình hàng hóa",
                            Level = 2,
                            SubFunc = 7
                        },
                        new
                        {
                            Id = 16,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9009),
                            FuncCode = "QuanLyCuaHang_CauHinhHangHoa_ThemMoi",
                            FuncName = "Thêm mới",
                            Level = 3,
                            SubFunc = 15
                        },
                        new
                        {
                            Id = 17,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9011),
                            FuncCode = "QuanLyCuaHang_CauHinhHangHoa_Xoa",
                            FuncName = "Xóa",
                            Level = 3,
                            SubFunc = 15
                        },
                        new
                        {
                            Id = 18,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9012),
                            FuncCode = "QuanLyCuaHang_NhapTienQuyDauNgay",
                            FuncName = "Nhập tiền quỹ đầu ngày",
                            Level = 1,
                            SubFunc = 7
                        },
                        new
                        {
                            Id = 19,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9013),
                            FuncCode = "QuanLyThuChi",
                            FuncName = "Quản lý thu chi",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 20,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9015),
                            FuncCode = "QuanLyThuChi_ChiHoatDong",
                            FuncName = "Chi hoạt động",
                            Level = 2,
                            SubFunc = 19
                        },
                        new
                        {
                            Id = 21,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9016),
                            FuncCode = "QuanLyThuChi_ChiHoatDong_ChiTien",
                            FuncName = "Chi tiền",
                            Level = 3,
                            SubFunc = 20
                        },
                        new
                        {
                            Id = 22,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9017),
                            FuncCode = "QuanLyThuChi_ThuHoatDong",
                            FuncName = "Thu hoạt động",
                            Level = 2,
                            SubFunc = 19
                        },
                        new
                        {
                            Id = 23,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9018),
                            FuncCode = "QuanLyThuChi_ThuHoatDong_ThuTien",
                            FuncName = "Thu tiền",
                            Level = 3,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 24,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9020),
                            FuncCode = "CamDo",
                            FuncName = "Cầm đồ",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 25,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9021),
                            FuncCode = "CamDo_ThemMoi",
                            FuncName = "Thêm mới",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 26,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9022),
                            FuncCode = "CamDo_XuatExcel",
                            FuncName = "Xuất excel",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 27,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9023),
                            FuncCode = "CamDo_ChonMauHopDong",
                            FuncName = "Chọn mẫu hợp đồng",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 28,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9025),
                            FuncCode = "CamDo_CapNhat",
                            FuncName = "Cập nhật",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 29,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9026),
                            FuncCode = "CamDo_InHopDong",
                            FuncName = "In hợp đồng",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 30,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9027),
                            FuncCode = "CamDo_DongLai",
                            FuncName = "Đóng lãi",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 31,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9029),
                            FuncCode = "CamDo_Xoa",
                            FuncName = "Xóa",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 32,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9030),
                            FuncCode = "CamDo_ChuocDo",
                            FuncName = "Chuộc đồ",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 33,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9031),
                            FuncCode = "CamDo_HenGioKhoanVay",
                            FuncName = "Hẹn giờ khoản vay",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 34,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9032),
                            FuncCode = "CamDo_ChuyenTrangThai",
                            FuncName = "Chuyển trạng thái qua thanh lý",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 35,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9034),
                            FuncCode = "CamDo_TraBotGoc",
                            FuncName = "Trả bớt gốc",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 36,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9035),
                            FuncCode = "CamDo_VayThem",
                            FuncName = "Vay thêm",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 37,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9036),
                            FuncCode = "CamDo_No",
                            FuncName = "Nợ",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 38,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9038),
                            FuncCode = "CamDo_ChungTu",
                            FuncName = "Chứng từ",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 39,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9039),
                            FuncCode = "CamDo_HenGio",
                            FuncName = "Hẹn giờ",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 40,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9040),
                            FuncCode = "CamDo_ThanhLy",
                            FuncName = "Thanh lý",
                            Level = 2,
                            SubFunc = 24
                        },
                        new
                        {
                            Id = 41,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9041),
                            FuncCode = "VayLai",
                            FuncName = "Vay lãi",
                            Level = 2,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 42,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9043),
                            FuncCode = "VayLai_ThemMoi",
                            FuncName = "Thêm mới",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 43,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9044),
                            FuncCode = "VayLai_CapNhat",
                            FuncName = "Nợ",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 44,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9045),
                            FuncCode = "VayLai_InHopDong",
                            FuncName = "In hợp đồng",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 45,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9046),
                            FuncCode = "VayLai_DongLai",
                            FuncName = "Đóng tiền lãi",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 46,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9048),
                            FuncCode = "VayLai_TraBotGoc",
                            FuncName = "Trả bớt gốc",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 47,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9049),
                            FuncCode = "VayLai_VayThem",
                            FuncName = "Vay thêm",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 48,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9050),
                            FuncCode = "VayLai_GiaHan",
                            FuncName = "Gia hạn",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 49,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9052),
                            FuncCode = "VayLai_DongHopDong",
                            FuncName = "Đóng hợp đồng",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 50,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9053),
                            FuncCode = "VayLai_No",
                            FuncName = "Nợ",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 51,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9054),
                            FuncCode = "VayLai_ChungTu",
                            FuncName = "Chứng từ",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 52,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9056),
                            FuncCode = "VayLai_HenGio",
                            FuncName = "Hẹn giờ",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 53,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9057),
                            FuncCode = "VayLai_ChuyenTrangThai",
                            FuncName = "Chuyển trạng thái",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 54,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9077),
                            FuncCode = "VayLai_Xoa",
                            FuncName = "Xóa",
                            Level = 2,
                            SubFunc = 41
                        },
                        new
                        {
                            Id = 55,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9079),
                            FuncCode = "QuanLyNhanVien",
                            FuncName = "Quản lý nhân viên",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 56,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9080),
                            FuncCode = "QuanLyNhanVien_ThemMoi",
                            FuncName = "Thêm mới",
                            Level = 2,
                            SubFunc = 55
                        },
                        new
                        {
                            Id = 57,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9081),
                            FuncCode = "QuanLyNhanVien_CapNhat",
                            FuncName = "Cập nhật",
                            Level = 2,
                            SubFunc = 55
                        },
                        new
                        {
                            Id = 58,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9095),
                            FuncCode = "QuanLyNhanVien_Xoa",
                            FuncName = "Xóa",
                            Level = 2,
                            SubFunc = 55
                        },
                        new
                        {
                            Id = 59,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9096),
                            FuncCode = "QuanLyNguonVon",
                            FuncName = "Quản lý nguồn vốn",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 60,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9097),
                            FuncCode = "QuanLyNguonVon_ThemMoi",
                            FuncName = "Thêm mới",
                            Level = 2,
                            SubFunc = 59
                        },
                        new
                        {
                            Id = 61,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9099),
                            FuncCode = "QuanLyNguonVon_CapNhat",
                            FuncName = "Cập nhật",
                            Level = 2,
                            SubFunc = 59
                        },
                        new
                        {
                            Id = 62,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9100),
                            FuncCode = "QuanLyNguonVon_InHopDong",
                            FuncName = "In hợp đồng",
                            Level = 2,
                            SubFunc = 59
                        },
                        new
                        {
                            Id = 63,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9101),
                            FuncCode = "QuanLyNguonVon_TraTienLai",
                            FuncName = "Trả tiền lãi",
                            Level = 2,
                            SubFunc = 59
                        },
                        new
                        {
                            Id = 64,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9102),
                            FuncCode = "QuanLyNguonVon_RutBotGoc",
                            FuncName = "Rút bớt gốc",
                            Level = 2,
                            SubFunc = 59
                        },
                        new
                        {
                            Id = 65,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9104),
                            FuncCode = "QuanLyNguonVon_VayThem",
                            FuncName = "Vay thêm",
                            Level = 2,
                            SubFunc = 59
                        },
                        new
                        {
                            Id = 66,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9105),
                            FuncCode = "QuanLyNguonVon_GiaHan",
                            FuncName = "Gia hạn",
                            Level = 2,
                            SubFunc = 59
                        },
                        new
                        {
                            Id = 67,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9106),
                            FuncCode = "QuanLyNguonVon_RutVon",
                            FuncName = "Rút vốn",
                            Level = 2,
                            SubFunc = 59
                        },
                        new
                        {
                            Id = 68,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9108),
                            FuncCode = "Setting",
                            FuncName = "Setting",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 69,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9109),
                            FuncCode = "BaoCao",
                            FuncName = "Báo cáo",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 70,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9110),
                            FuncCode = "BaoCao_TongKetGiaoDich",
                            FuncName = "Tổng kết giao dịch",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 71,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9111),
                            FuncCode = "BaoCao_TongKetLoiNhuan",
                            FuncName = "Tổng kết lợi nhuận",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 72,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9113),
                            FuncCode = "BaoCao_ChiTietLai",
                            FuncName = "Chi tiết lãi",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 73,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9114),
                            FuncCode = "BaoCao_DangChoVay",
                            FuncName = "Đang cho vay",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 74,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9115),
                            FuncCode = "BaoCao_ThongKeThuTien",
                            FuncName = "Thống kê thu tiền",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 75,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9116),
                            FuncCode = "BaoCao_HangChoThanhLy",
                            FuncName = "Hàng chờ thanh lý",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 76,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9118),
                            FuncCode = "BaoCao_ChuocDoDongHopDong",
                            FuncName = "Chuộc đồ, đóng hợp đồng",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 77,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9119),
                            FuncCode = "BaoCao_ThanhLyDo",
                            FuncName = "Thanh lý đồ",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 78,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9120),
                            FuncCode = "BaoCao_HopDongDaXoa",
                            FuncName = "Hợp đồng đã xóa",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 79,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9122),
                            FuncCode = "BaoCao_TinNhan",
                            FuncName = "Tin nhắn",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 80,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9123),
                            FuncCode = "BaoCao_BanGiaoCa",
                            FuncName = "Bàn giao ca",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 81,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9124),
                            FuncCode = "BaoCao_DongTienTheoNgay",
                            FuncName = "Dòng tiền theo ngày",
                            Level = 2,
                            SubFunc = 69
                        },
                        new
                        {
                            Id = 82,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9125),
                            FuncCode = "CheckNoXau",
                            FuncName = "Check nợ xấu",
                            Level = 1,
                            SubFunc = 0
                        },
                        new
                        {
                            Id = 83,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9127),
                            FuncCode = "CheckNoXau_CheckNoXau",
                            FuncName = "Check nợ xấu",
                            Level = 2,
                            SubFunc = 82
                        },
                        new
                        {
                            Id = 84,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9128),
                            FuncCode = "CheckNoXau_ThemMoiBanBe",
                            FuncName = "Thêm mới bạn bè",
                            Level = 2,
                            SubFunc = 82
                        },
                        new
                        {
                            Id = 85,
                            CreatedTime = new DateTime(2022, 9, 18, 14, 28, 20, 83, DateTimeKind.Local).AddTicks(9129),
                            FuncCode = "CheckNoXau_XacNhanBanBe",
                            FuncName = "Xác nhận bạn bè",
                            Level = 2,
                            SubFunc = 82
                        });
                });

            modelBuilder.Entity("BaseSource.Data.Entities.AuthorUserFunction", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("FuncId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FuncId");

                    b.ToTable("AuthorUserFunctions");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.BaiViet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DanhMucBaiVietId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DanhMucBaiVietId");

                    b.ToTable("BaiViets");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.BaoHiem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("CMND")
                        .HasMaxLength(20)
                        .HasColumnType("float");

                    b.Property<DateTime>("CMND_NgayCap")
                        .HasColumnType("datetime2");

                    b.Property<string>("CMND_NoiCap")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<string>("DiaChi")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("GioiTinh")
                        .HasMaxLength(20)
                        .HasColumnType("float");

                    b.Property<string>("ImageList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MST")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("SDT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("TienBaoHiem")
                        .HasColumnType("float");

                    b.Property<double>("TienChietKhau")
                        .HasColumnType("float");

                    b.Property<double>("TienPhi")
                        .HasColumnType("float");

                    b.Property<double>("TongTien")
                        .HasColumnType("float");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CuaHangId");

                    b.HasIndex("UserId");

                    b.ToTable("BaoHiems");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CauHinhHangHoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<byte>("HinhThucLai")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsPublish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsThuLaiTruoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("KyLai")
                        .HasColumnType("int");

                    b.Property<double>("LaiSuat")
                        .HasColumnType("float");

                    b.Property<byte>("LinhVuc")
                        .HasColumnType("tinyint");

                    b.Property<string>("ListThuocTinh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaTS")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("SoNgayQuaHan")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TongThoiGianVay")
                        .HasColumnType("int");

                    b.Property<double?>("TongTien")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CuaHangId");

                    b.ToTable("CauHinhHangHoas");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CuaHang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte>("CamDo_HopDongPrintTemplate")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TenNguoiDaiDien")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte>("VayLai_HopDongPrintTemplate")
                        .HasColumnType("tinyint");

                    b.Property<long>("VonDauTu")
                        .HasMaxLength(0)
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CuaHangs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CuaHang_QuyTienLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<byte>("LogType")
                        .HasColumnType("tinyint");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CuaHangId");

                    b.ToTable("CuaHang_QuyTienLogs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CuaHang_TransactionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<byte>("FeatureType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HopDongId")
                        .HasColumnType("int");

                    b.Property<double>("MoneyAdd")
                        .HasColumnType("float");

                    b.Property<double>("MoneyDebit")
                        .HasColumnType("float");

                    b.Property<double>("MoneyInterest")
                        .HasColumnType("float");

                    b.Property<double>("MoneyOther")
                        .HasColumnType("float");

                    b.Property<double>("MoneyPay")
                        .HasColumnType("float");

                    b.Property<double>("MoneyPayNeed")
                        .HasColumnType("float");

                    b.Property<double>("MoneySub")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReferId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenKhachHang")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalMoneyLoan")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CuaHangId");

                    b.HasIndex("HopDongId");

                    b.ToTable("CuaHang_TransactionLogs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.DanhMucBaiViet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DisableDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DanhMucBaiViets");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<string>("FeedBackContent")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("TenCuaHang")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserFeedBack")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.Friendship", b =>
                {
                    b.Property<string>("UserIdReceive")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIdRequest")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.HasKey("UserIdReceive", "UserIdRequest");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.GoiSanPham", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("KhuyenMai")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MoTa")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("SoThang")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("TongTien")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserIdCreated")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserIdUpdate")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("GoiSanPhams");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.GoiSanPham_LichSuMua", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoiSanPhamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenGoi")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("TongTien")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("GoiSanPhamId");

                    b.HasIndex("UserId");

                    b.ToTable("GoiSanPham_LichSuMuas");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HD_GhiChu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("HD_HinhThucLai")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HD_IsThuLaiTruoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("HD_KyLai")
                        .HasColumnType("int");

                    b.Property<double>("HD_LaiSuat")
                        .HasColumnType("float");

                    b.Property<byte>("HD_Loai")
                        .HasColumnType("tinyint");

                    b.Property<string>("HD_Ma")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("HD_NgayDaoHan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HD_NgayVay")
                        .HasColumnType("datetime2");

                    b.Property<byte>("HD_Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("HD_TongThoiGianVay")
                        .HasColumnType("int");

                    b.Property<double>("HD_TongTienVayBanDau")
                        .HasColumnType("float");

                    b.Property<int?>("HangHoaId")
                        .HasColumnType("int");

                    b.Property<string>("ImageList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNoXau_ChoThanhLy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("KhachHangId")
                        .HasColumnType("int");

                    b.Property<string>("ListThuocTinhHangHoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgayDongLaiGanNhat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayDongLaiTiepTheo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayTatToan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayThanhLy")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoNgayLaiToiHienTai")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TenTaiSan")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("TienLaiToiNgayHienTai")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("TongTienChuoc")
                        .HasColumnType("float");

                    b.Property<double>("TongTienDaThanhToan")
                        .HasColumnType("float");

                    b.Property<double>("TongTienGhiNo")
                        .HasColumnType("float");

                    b.Property<double>("TongTienLai")
                        .HasColumnType("float");

                    b.Property<double>("TongTienLaiDaThanhToan")
                        .HasColumnType("float");

                    b.Property<double>("TongTienThanhLy")
                        .HasColumnType("float");

                    b.Property<double>("TongTienVayHienTai")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserIdAssigned")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserIdCreated")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CuaHangId");

                    b.ToTable("HopDongs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_AlarmLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlarmDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("HopDongId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("HopDongId");

                    b.ToTable("HopDong_AlarmLogs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_DebtNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HopDongId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HopDongId");

                    b.ToTable("HopDong_DebtNotes");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_GiaHan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountDate")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("HopDongId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("HopDongId");

                    b.ToTable("HopDong_GiaHans");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_PaymentLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("CountDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HopDongId")
                        .HasColumnType("int");

                    b.Property<double>("MoneyInterest")
                        .HasColumnType("float");

                    b.Property<double>("MoneyOther")
                        .HasColumnType("float");

                    b.Property<double>("MoneyPay")
                        .HasColumnType("float");

                    b.Property<double>("MoneyPayNeed")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HopDongId");

                    b.ToTable("HopDong_PaymentLogs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_PaymentLogNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("HopDong_PaymentLogNotes");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_VayRutGoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("ExtraDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HopDongId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("HopDongId");

                    b.ToTable("HopDong_VayRutGocs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.KhachHang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CMND")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CMND_NgayCap")
                        .HasColumnType("datetime2");

                    b.Property<string>("CMND_NoiCap")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<string>("DiaChi")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ImageList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("SDT")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CuaHangId");

                    b.ToTable("KhachHangs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.LienHe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LienHes");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.MoTaHinhThucLai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte?>("HinhThucLai")
                        .HasColumnType("tinyint");

                    b.Property<string>("MoTaKyLai")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("ThoiGian")
                        .HasColumnType("tinyint");

                    b.Property<string>("TyLeLai")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("MoTaHinhThucLais");

                    b.HasData(
                        new
                        {
                            Id = 99,
                            MoTaKyLai = "Đầu tư",
                            ThoiGian = (byte)0,
                            TyLeLai = "Không tính lãi"
                        });
                });

            modelBuilder.Entity("BaseSource.Data.Entities.NotifySystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("UserIdCreated")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("NotifySystems");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.ReportCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CMND")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("UpdateById")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasMaxLength(128)
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserReport")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ReportCustomers");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("CuaHangId")
                        .HasColumnType("int");

                    b.Property<string>("CustomId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("JoinedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("SubUserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId");

                    b.HasIndex("CustomId")
                        .IsUnique();

                    b.ToTable("UserProfile");

                    b.HasData(
                        new
                        {
                            UserId = "ffded6b0-3769-4976-841b-69459049a62d",
                            Balance = 0.0,
                            CuaHangId = 0,
                            CustomId = "ffded6b0-3769-4976-841b-69459049a62d",
                            FullName = "Nguyễn Giàu",
                            IsDelete = false,
                            JoinedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BaseSource.Data.Entities.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("BalanceAffter")
                        .HasColumnType("float");

                    b.Property<double>("BalanceBefore")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<byte>("TargetType")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "ffded6b0-3769-4976-841b-69459049a62d",
                            RoleId = "c1105ce5-9dbc-49a9-a7d5-c963b6daa62a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.BaiViet", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.DanhMucBaiViet", "DanhMucBaiViet")
                        .WithMany("BaiViets")
                        .HasForeignKey("DanhMucBaiVietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DanhMucBaiViet");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.BaoHiem", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.CuaHang", "CuaHang")
                        .WithMany("BaoHiems")
                        .HasForeignKey("CuaHangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("BaoHiems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CuaHang");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CauHinhHangHoa", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.CuaHang", "CuaHang")
                        .WithMany("CauHinhHangHoas")
                        .HasForeignKey("CuaHangId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CuaHang");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CuaHang", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.UserProfile", "UserProfileQuanLy")
                        .WithMany("CuaHangQuanLys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfileQuanLy");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CuaHang_QuyTienLog", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.CuaHang", "CuaHang")
                        .WithMany("CuaHang_QuyTienLogs")
                        .HasForeignKey("CuaHangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuaHang");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CuaHang_TransactionLog", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.CuaHang", "CuaHang")
                        .WithMany("CuaHang_TransactionLogs")
                        .HasForeignKey("CuaHangId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BaseSource.Data.Entities.HopDong", "HopDong")
                        .WithMany("CuaHang_TransactionLogs")
                        .HasForeignKey("HopDongId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CuaHang");

                    b.Navigation("HopDong");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.GoiSanPham_LichSuMua", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.GoiSanPham", "GoiSanPham")
                        .WithMany("goiSanPham_LichSuMuas")
                        .HasForeignKey("GoiSanPhamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("GoiSanPham_LichSuMuas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoiSanPham");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.CuaHang", "CuaHang")
                        .WithMany("HopDongs")
                        .HasForeignKey("CuaHangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuaHang");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_AlarmLog", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.HopDong", "HopDong")
                        .WithMany("HopDong_AlarmLogs")
                        .HasForeignKey("HopDongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HopDong");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_DebtNote", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.HopDong", "HopDong")
                        .WithMany("HopDong_DebtNotes")
                        .HasForeignKey("HopDongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HopDong");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_GiaHan", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.HopDong", "HopDong")
                        .WithMany("HopDong_GiaHans")
                        .HasForeignKey("HopDongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HopDong");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_PaymentLog", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.HopDong", "HopDong")
                        .WithMany("HopDong_PaymentLogs")
                        .HasForeignKey("HopDongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HopDong");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_PaymentLogNote", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.HopDong_PaymentLog", "HopDong_PaymentLog")
                        .WithMany("HopDong_PaymentLogNotes")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HopDong_PaymentLog");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_VayRutGoc", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.HopDong", "HopDong")
                        .WithMany("HopDong_VayRutGocs")
                        .HasForeignKey("HopDongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HopDong");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.KhachHang", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.CuaHang", "CuaHang")
                        .WithMany("KhachHangs")
                        .HasForeignKey("CuaHangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuaHang");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.UserProfile", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.AppUser", "AppUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("BaseSource.Data.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.WalletTransaction", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BaseSource.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseSource.Data.Entities.AppUser", b =>
                {
                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.CuaHang", b =>
                {
                    b.Navigation("BaoHiems");

                    b.Navigation("CauHinhHangHoas");

                    b.Navigation("CuaHang_QuyTienLogs");

                    b.Navigation("CuaHang_TransactionLogs");

                    b.Navigation("HopDongs");

                    b.Navigation("KhachHangs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.DanhMucBaiViet", b =>
                {
                    b.Navigation("BaiViets");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.GoiSanPham", b =>
                {
                    b.Navigation("goiSanPham_LichSuMuas");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong", b =>
                {
                    b.Navigation("CuaHang_TransactionLogs");

                    b.Navigation("HopDong_AlarmLogs");

                    b.Navigation("HopDong_DebtNotes");

                    b.Navigation("HopDong_GiaHans");

                    b.Navigation("HopDong_PaymentLogs");

                    b.Navigation("HopDong_VayRutGocs");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.HopDong_PaymentLog", b =>
                {
                    b.Navigation("HopDong_PaymentLogNotes");
                });

            modelBuilder.Entity("BaseSource.Data.Entities.UserProfile", b =>
                {
                    b.Navigation("BaoHiems");

                    b.Navigation("CuaHangQuanLys");

                    b.Navigation("GoiSanPham_LichSuMuas");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
